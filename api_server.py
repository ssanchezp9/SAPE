"""
API Server para el sistema SAPE
Mantiene el SwarmMaster cargado y permite conversaciones persistentes a trav√©s de una API REST.
"""

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import Optional, Dict, List
import uuid
import logging
from contextlib import asynccontextmanager

from src.agents.swarm_master import SwarmMaster
from src.utils.memory.conversation_memory import ConversationMemory
from src.utils.logger import logging_config

# Configurar logging
logger = logging_config.get_logger(__name__)

# SwarmMaster global compartido
global_swarm_master: Optional[SwarmMaster] = None

# Almac√©n de memorias de conversaciones separadas
conversation_memories: Dict[str, ConversationMemory] = {}

class ConversationRequest(BaseModel):
    """Modelo para las peticiones de conversaci√≥n"""
    message: str
    conversation_id: Optional[str] = None
    
    class Config:
        # Ejemplo de uso en la documentaci√≥n
        schema_extra = {
            "example": {
                "message": "Hola, quiero crear un resumen de un texto",
                "conversation_id": None  # Omitir para crear nueva conversaci√≥n
            }
        }

class ConversationResponse(BaseModel):
    """Modelo para las respuestas de conversaci√≥n"""
    conversation_id: str
    response: str
    message: str

class ConversationInfo(BaseModel):
    """Modelo para informaci√≥n de conversaci√≥n"""
    conversation_id: str
    created_at: str
    message_count: int

@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Maneja el ciclo de vida de la aplicaci√≥n.
    Se ejecuta al inicio y al final de la aplicaci√≥n.
    """
    global global_swarm_master
    
    # Startup
    logger.info("üöÄ Iniciando servidor API...")
    logger.info("üì¶ Cargando SwarmMaster...")
    
    try:
        # Crear el SwarmMaster que se usar√° para todas las conversaciones
        global_swarm_master = SwarmMaster()
        logger.info("‚úÖ SwarmMaster cargado exitosamente")
        logger.info(f"üìä Agentes disponibles: {len(global_swarm_master.agents)}")
        logger.info(f"üìã Planificadores disponibles: {len(global_swarm_master.planners)}")
        
    except Exception as e:
        logger.error(f"‚ùå Error al cargar SwarmMaster: {e}")
        raise
    
    yield
    
    # Shutdown
    logger.info("üõë Cerrando servidor API...")
    conversation_memories.clear()
    logger.info("‚úÖ Servidor cerrado correctamente")

# Crear la aplicaci√≥n FastAPI con el lifespan
app = FastAPI(
    title="SAPE API",
    description="API para el sistema SAPE con SwarmMaster integrado",
    version="1.0.0",
    lifespan=lifespan
)



@app.post("/chat", response_model=ConversationResponse)
async def chat(request: ConversationRequest):
    """
    Endpoint principal para chatear con el SwarmMaster.
    Usa el SwarmMaster global como template y mantiene memorias separadas por conversaci√≥n.
    """
    try:
        conversation_id = request.conversation_id
        
        # Si no hay conversation_id o es inv√°lido, crear una nueva conversaci√≥n
        if not conversation_id or conversation_id.strip() == "" or conversation_id == "string":
            conversation_id = str(uuid.uuid4())
            # Crear una nueva memoria para esta conversaci√≥n
            conversation_memories[conversation_id] = ConversationMemory()
            logger.info(f"üí¨ Nueva conversaci√≥n creada: {conversation_id}")
        
        # Verificar que la conversaci√≥n existe, si no existe, crear una nueva
        if conversation_id not in conversation_memories:
            logger.warning(f"‚ö†Ô∏è Conversaci√≥n {conversation_id} no encontrada, creando nueva conversaci√≥n")
            conversation_id = str(uuid.uuid4())
            conversation_memories[conversation_id] = ConversationMemory()
            logger.info(f"üí¨ Nueva conversaci√≥n creada (recuperaci√≥n): {conversation_id}")
        
        # Obtener la memoria espec√≠fica de esta conversaci√≥n
        current_memory = conversation_memories[conversation_id]
        
        # Configurar temporalmente la memoria en el SwarmMaster global para esta request
        # Guardamos la memoria original
        original_memory = global_swarm_master.memory
        
        try:
            # Asignamos la memoria de la conversaci√≥n actual
            global_swarm_master.memory = current_memory
            
            # Configurar la memoria en todos los agentes del SwarmMaster
            for agent in global_swarm_master.agents:
                if hasattr(agent, 'set_memory'):
                    agent.set_memory(current_memory)
            
            # Procesar el mensaje
            logger.info(f"üí≠ Procesando mensaje en conversaci√≥n {conversation_id}: {request.message[:50]}...")
            response = global_swarm_master.run(request.message)
            
        finally:
            # Siempre restaurar la memoria original
            global_swarm_master.memory = original_memory
        
        logger.info(f"‚úÖ Respuesta generada para conversaci√≥n {conversation_id}")
        
        return ConversationResponse(
            conversation_id=conversation_id,
            response=response,
            message="Mensaje procesado correctamente"
        )
        
    except Exception as e:
        logger.error(f"‚ùå Error al procesar mensaje: {e}")
        raise HTTPException(status_code=500, detail=f"Error interno: {str(e)}")

if __name__ == "__main__":
    import uvicorn
    
    logger.info("üöÄ Iniciando servidor SAPE API...")
    uvicorn.run(
        "api_server:app",
        host="0.0.0.0",
        port=8000,
        reload=False,  # Deshabilitar reload en producci√≥n
        log_level="info"
    )
